 0x270
void test_function(int a, int b, int c, int d) {
 int flag;
 char buffer[10];
 flag = 31337;
 buffer[0] = 'A';
 }
 int main() {
 test_function(1, 2, 3, 4);
 }

---------------------------------------------------------------------------------------------------------
 0x281

simplenote.c

 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <fcntl.h>
 #include <sys/stat.h>
 void usage(char *prog_name, char *filename) {
 printf("Usage: %s <data to add to %s>\n", prog_name, filename);
 exit(0);
 }
 void fatal(char *);           
 // A function for fatal errors
 void *ec_malloc(unsigned int); // An error-checked malloc() wrapper
 int main(int argc, char *argv[]) {
 int fd; // file descriptor
 char *buffer, *datafile;
 buffer = (char *) ec_malloc(100);
 datafile = (char *) ec_malloc(20);
 strcpy(datafile, "/tmp/notes");
 if(argc < 2)               

  // If there aren't command-line arguments,
 usage(argv[0], datafile); // display usage message and exit.
 strcpy(buffer, argv[1]);  // Copy into buffer.
 printf("[DEBUG] buffer 
  @ 
%p: \'%s\'\n", buffer, buffer);
 printf("[DEBUG] datafile @ %p: \'%s\'\n", datafile, datafile);
 strncat(buffer, "\n", 1); // Add a newline on the end.
 // Opening file
 fd = open(datafile, O_WRONLY|O_CREAT|O_APPEND, S_IRUSR|S_IWUSR);
 if(fd == -1)
 fatal("in main() while opening file");
 printf("[DEBUG] file descriptor is %d\n", fd);
 // Writing data
 if(write(fd, buffer, strlen(buffer)) == -1)
 fatal("in main() while writing buffer to file");
 // Closing file
 if(close(fd) == -1)
 fatal("in main() while closing file");
 printf("Note has been saved.\n");
 free(buffer);
 free(datafile);
 }
 // A function to display an error message and then exit
 void fatal(char *message) {
 char error_message[100];
 strcpy(error_message, "[!!] Fatal Error ");
 strncat(error_message, message, 83);
 perror(error_message);
 exit(-1);
 }
 // An error-checked malloc() wrapper function
 void *ec_malloc(unsigned int size) {
 void *ptr;
 ptr = malloc(size);
 if(ptr == NULL)
 fatal("in ec_malloc() on memory allocation");
 return ptr;
 }

-------------------------------------------------------------------

 bitwise.c

 #include <stdio.h>
 int main() {
 int i, bit_a, bit_b;

 printf("bitwise OR operator  |\n");
 for(i=0; i < 4; i++) {
 bit_a = (i & 2) / 2; // Get the second bit.
 bit_b = (i & 1);    
 // Get the first bit.
 printf("%d | %d = %d\n", bit_a, bit_b, bit_a | bit_b);
 }
 printf("\nbitwise AND operator  &\n");
 for(i=0; i < 4; i++) {
 bit_a = (i & 2) / 2; // Get the second bit.
 bit_b = (i & 1);    
 // Get the first bit.
 printf("%d & %d = %d\n", bit_a, bit_b, bit_a & bit_b);
 }
 }

---------------------------------------------------------------------

 fcntl_flags.c

 #include <stdio.h>
 #include <fcntl.h>
 void display_flags(char *, unsigned int);
 void binary_print(unsigned int);
 int main(int argc, char *argv[]) {
 display_flags("O_RDONLY\t\t", O_RDONLY);
 display_flags("O_WRONLY\t\t", O_WRONLY);
 display_flags("O_RDWR\t\t\t", O_RDWR);
 printf("\n");
 display_flags("O_APPEND\t\t", O_APPEND);
 display_flags("O_TRUNC\t\t\t", O_TRUNC);
 display_flags("O_CREAT\t\t\t", O_CREAT);
 85
 Programming

   printf("\n");
   display_flags("O_WRONLY|O_APPEND|O_CREAT", O_WRONLY|O_APPEND|O_CREAT);
 }
 void display_flags(char *label, unsigned int value) {
   printf("%s\t: %d\t:", label, value);
   binary_print(value);
   printf("\n");
 }
 void binary_print(unsigned int value) {
   unsigned int mask = 0xff000000; // Start with a mask for the highest byte.
   unsigned int shift = 256*256*256; // Start with a shift for the highest byte.
   unsigned int byte, byte_iterator, bit_iterator;
   for(byte_iterator=0; byte_iterator < 4; byte_iterator++) {
      byte = (value & mask) / shift; // Isolate each byte.
      printf(" ");
      for(bit_iterator=0; bit_iterator < 8; bit_iterator++) { // Print the byte's bits.
         if(byte & 0x80) // If the highest bit in the byte isn't 0,
            printf("1");       // print a 1.
         else
            printf("0");       // Otherwise, print a 0.
         byte *= 2;         // Move all the bits to the left by 1.
      }
      mask /= 256;       // Move the bits in mask right by 8.
      shift /= 256;      // Move the bits in shift right by 8.
   }
 }

---------------------------------------------------------------------------------
0x282 y 0x283

uid_demo.c

 #include <stdio.h>
 int main() {
 printf("real uid: %d\n", getuid());
 printf("effective uid: %d\n", geteuid());
 }

-------------------------------------------------------------------------------------------

hacking.h

 // A function to display an error message and then exit
 void fatal(char *message) {
 char error_message[100];
 strcpy(error_message, "[!!] Fatal Error ");
 strncat(error_message, message, 83);
 perror(error_message);
 exit(-1);
 }
 // An error-checked malloc() wrapper function
 void *ec_malloc(unsigned int size) {
 void *ptr;
 ptr = malloc(size);
 if(ptr == NULL)
 fatal("in ec_malloc() on memory allocation");
 return ptr;
 }
------------------------------------------------------------------------------------------------
 notetaker.c

 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <fcntl.h>
 #include <sys/stat.h>
 #include "hacking.h"
 void usage(char *prog_name, char *filename) {
 printf("Usage: %s <data to add to %s>\n", prog_name, filename);
 exit(0);
 
}
 void fatal(char *);           
 // A function for fatal errors
 void *ec_malloc(unsigned int); // An error-checked malloc() wrapper
 int main(int argc, char *argv[]) {
 int userid, fd; // File descriptor
 char *buffer, *datafile;
 buffer = (char *) ec_malloc(100);
 datafile = (char *) ec_malloc(20);
 strcpy(datafile, "/var/notes");
 if(argc < 2)               
 // If there aren't command-line arguments,
 usage(argv[0], datafile); // display usage message and exit.
 strcpy(buffer, argv[1]);  // Copy into buffer.
 printf("[DEBUG] buffer 
  @ 
%p: \'%s\'\n", buffer, buffer);
 printf("[DEBUG] datafile @ %p: \'%s\'\n", datafile, datafile);
 // Opening the file
 fd = open(datafile, O_WRONLY|O_CREAT|O_APPEND, S_IRUSR|S_IWUSR);
 if(fd == -1)
 fatal("in main() while opening file");
 printf("[DEBUG] file descriptor is %d\n", fd);
 userid = getuid(); // Get the real user ID.
 // Writing data
 if(write(fd, &userid, 4) == -1) // Write user ID before note data.
 fatal("in main() while writing userid to file");
 write(fd, "\n", 1); // Terminate line.
 if(write(fd, buffer, strlen(buffer)) == -1) // Write note.
 fatal("in main() while writing buffer to file");
 write(fd, "\n", 1); // Terminate line.
 // Closing file
 if(close(fd) == -1)
 fatal("in main() while closing file");
 printf("Note has been saved.\n");
 free(buffer);
 free(datafile);
 }
-----------------------------------------------------------------------------------------
notesearch.c 

#include <stdio.h>
 #include <string.h>
 #include <fcntl.h>
 #include <sys/stat.h>
 #include "hacking.h"

 #define FILENAME "/var/notes"
 int print_notes(int, int, char *);   // Note printing function.
 int find_user_note(int, int);        // Seek in file for a note for user.
 int search_note(char *, char *);     // Search for keyword function.
 void fatal(char *);                  // Fatal error handler
 int main(int argc, char *argv[]) {
   int userid, printing=1, fd; // File descriptor
   char searchstring[100];
   if(argc > 1)                        // If there is an arg,
      strcpy(searchstring, argv[1]);   //   that is the search string;
   else                                // otherwise,
      searchstring[0] = 0;             //   search string is empty.
   userid = getuid();
   fd = open(FILENAME, O_RDONLY);   // Open the file for read-only access.
   if(fd == -1)
      fatal("in main() while opening file for reading");
   while(printing)
      printing = print_notes(fd, userid, searchstring);
   printf("-------[ end of note data ]-------\n");
   close(fd);
 }
 // A function to print the notes for a given uid that match
 // an optional search string;
 // returns 0 at end of file, 1 if there are still more notes.
 int print_notes(int fd, int uid, char *searchstring) {
   int note_length;
   char byte=0, note_buffer[100];
   note_length = find_user_note(fd, uid);
   if(note_length == -1)  // If end of file reached,
      return 0;           //   return 0.
   read(fd, note_buffer, note_length); // Read note data.
   note_buffer[note_length] = 0;       // Terminate the string.
   if(search_note(note_buffer, searchstring)) // If searchstring found,
      printf(note_buffer);                    //   print the note.
   return 1;
 }
 // A function to find the next note for a given userID;
 // returns -1 if the end of the file is reached;
 // otherwise, it returns the length of the found note.
 int find_user_note(int fd, int user_uid) {
   int note_uid=-1;
   unsigned char byte;
   int length;
   while(note_uid != user_uid) {  // Loop until a note for user_uid is found.

      if(read(fd, &note_uid, 4) != 4) // Read the uid data.
         return -1; // If 4 bytes aren't read, return end of file code.
      if(read(fd, &byte, 1) != 1) // Read the newline separator.
         return -1;
      byte = length = 0;
      while(byte != '\n') {  // Figure out how many bytes to the end of line.
         if(read(fd, &byte, 1) != 1) // Read a single byte.
            return -1;     // If byte isn't read, return end of file code.
         length++;
      }
   }
   lseek(fd, length * -1, SEEK_CUR); // Rewind file reading by length bytes.
   printf("[DEBUG] found a %d byte note for user id %d\n", length, note_uid);
   return length;
 }
 // A function to search a note for a given keyword;
 // returns 1 if a match is found, 0 if there is no match.
 int search_note(char *note, char *keyword) {
   int i, keyword_length, match=0;
   keyword_length = strlen(keyword);
   if(keyword_length == 0)  // If there is no search string,
      return 1;              // always "match".
   for(i=0; i < strlen(note); i++) { // Iterate over bytes in note.
      if(note[i] == keyword[match])  // If byte matches keyword,
         match++;   // get ready to check the next byte;
      else {        //   otherwise,
         if(note[i] == keyword[0]) // if that byte matches first keyword byte,
            match = 1;  // start the match count at 1.
         else
            match = 0;  // Otherwise it is zero.
      }
      if(match == keyword_length) // If there is a full match,
         return 1;   // return matched.
   }
   return 0;  // Return not matched.
 }
----------------------------------------------------------------------------------------------------
0x286
 rand_example.c

 #include <stdio.h>
 #include <stdlib.h>
 int main() {
 int i;
 printf("RAND_MAX is %u\n", RAND_MAX);
 srand(time(0));
 printf("random values from 0 to RAND_MAX\n");
 for(i=0; i < 8; i++)
 printf("%d\n", rand());
 printf("random values from 1 to 20\n");
 for(i=0; i < 8; i++)
 printf("%d\n", (rand()%20)+1);
 }
